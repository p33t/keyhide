@page "/5"
@inject UiState _uiState
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@using System.Text.Json
@using System.Reflection
@using System.Text
@using System.IO
<h3>Export</h3>
<p>
    Trace the same path on the grid in this HTML file to reveal your secret key.<br/>
    (Don't forget to remove the ".txt" extension)
</p>
<button type="button" class="next-button btn btn-warning" @onclick="@(() => _navigationManager.NavigateTo("4"))">Back</button>
<p>&nbsp;</p>
@if (ExportDisabled)
{
    <p>Unable to export. Please ensure all previous steps have been completed.</p>
}
@if (!ExportDisabled)
{
    <p>
        <a download="@_fileName" href="@($"data:text/plain;base64,{_base64}")">Download</a> or
        @* <a target="_blank" href="@($"data:text/html;base64,{_base64}")">Open in new tab</a> *@
        @* <a href="5" @onclick="@OpenNewTab">Open in new tab</a> *@
        <button type="button" @onclick="@OpenNewTab">Open in new tab</button>
    </p>
}

@code {
#nullable enable

    private bool ExportDisabled => _uiState.FinalModel == null;

    private string? _base64;
    private string? _html;
    private string? _fileName;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!ExportDisabled)
        {
            _html = await RenderFinal(_uiState.FinalModel!);
            byte[] file = Encoding.UTF8.GetBytes(_html);
            _base64 = Convert.ToBase64String(file);
            var timeString = _uiState.FinalModelTimestamp!.Value.ToString("yyyy-MM-dd_hh_mm_ss");
            _fileName = $"keyhide_{timeString}.html.txt";
        }
    }

    private async Task<string> RenderFinal(FinalModel model)
    {
        var deliverable = await LoadDeliverable();
        return deliverable.Replace("// FINAL_MODEL_MARKER", $"finalModel = {JsonSerializer.Serialize(model)};");
    }

    private static async Task<string> LoadDeliverable()
    {
        var assembly = Assembly.GetAssembly(typeof(UiState));
        var fileName = $"{assembly!.GetName().Name}.etc.deliverable.html";
        await using var resFilestream = assembly.GetManifestResourceStream(fileName);
        await using var ms = new MemoryStream();
        await resFilestream!.CopyToAsync(ms);
        await resFilestream.DisposeAsync();
        var bytes = ms.ToArray();
        await ms.DisposeAsync();
        return Encoding.UTF8.GetString(bytes);
    }

    private async Task OpenNewTab()
    {
        await _jsRuntime.InvokeVoidAsync("openInNewTab", _html!);
    }
}