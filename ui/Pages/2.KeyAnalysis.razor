@page "/2"
@inject UiState _uiState
@inject NavigationManager _navigationManager
<h3>Key Analysis</h3>

<p>
    Enter the key that will be hidden among the grid of random characters and select 'Analyze'.
    Confirm the parameters are correct before proceeding to next step.
</p>
<div class="main">
    @* NOTE: IValidatableObject error checking only occurs upon submit *@
    <EditForm EditContext="@EditContext" OnValidSubmit="@NextScreen">
        <div class="form-fields">
            <button type="button" @onclick="Undo" disabled="@UndoDisabled">Undo</button>
            <button type="submit" class="next-button btn btn-warning">Next</button>
            <div class="form-field">
                <label>Prefix:</label>

                <div>
                    <InputText @bind-Value="@(_uiState.KeyDefinition.Prefix)"/>
                    <ValidationMessage For="@(() => _uiState.KeyDefinition.Prefix)"/>
                </div>
            </div>
            <div class="form-field">
                <label>Key:</label>
                <div>
                    <InputText @bind-Value="_uiState.KeyDefinition.KeyString" minlength="1"/>
                    <button type="button" @onclick="Analyze">Analyze</button>
                    <ValidationMessage For="@(() => _uiState.KeyDefinition.KeyString)"/>
                </div>
            </div>
            <div class="form-field">
                <label>Suffix:</label>
                <div>
                    <InputText @bind-Value="_uiState.KeyDefinition.Suffix"/>
                    <ValidationMessage For="@(() => _uiState.KeyDefinition.Suffix)"/>
                </div>
            </div>
            <div class="form-field">
                <label>Fragment Separator:</label>
                <div>
                    <InputText maxlength="1" @bind-Value="_uiState.KeyDefinition.SeparatorStr"/>
                    <ValidationMessage For="@(() => _uiState.KeyDefinition.Separator)"/>
                </div>
            </div>
            <div class="form-field">
                <label>Pre-defined Characters:</label>
                <div>
                    <select class="custom-select" @onchange="PredefinedCharsChanged">
                        <option value="" selected="@(_uiState.KeyDefinition.CharSet == null)">(Custom)</option>
                        @foreach (var charSet in Enum.GetValues<KeyCharSetEnum>())
                        {
                            <option value="@charSet" selected="@(charSet == _uiState.KeyDefinition.CharSet)">@charSet</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => _uiState.KeyDefinition.CharSet)"/>
                </div>
            </div>
            <div class="form-field">
                <label>Custom Characters:</label>
                <div>
                    <InputText @bind-Value="_uiState.KeyDefinition.CustomCharset"/>
                    <ValidationMessage For="@(() => _uiState.KeyDefinition.CustomCharset)"/>
                </div>
            </div>
        </div>
        <DataAnnotationsValidator/>
    </EditForm>
</div>

@code {
#nullable enable

    private bool UndoDisabled => _uiState.ValidKeyDefinition == null;
    // Causes 'Undo' become available only after field on-change:
    // || _uiState.KeyDefinition.Equals(_uiState.ValidKeyDefinition)

    private EditContext EditContext { get; set; } = null!;

    protected override void OnInitialized()
    {
        EditContext = new EditContext(_uiState.KeyDefinition);
        base.OnInitialized();
    }    
    private void PredefinedCharsChanged(ChangeEventArgs evt)
    {
        KeyCharSetEnum? charSet;
        if (evt.Value is string {Length: > 0 } charSetStr)
            charSet = Enum.Parse<KeyCharSetEnum>(charSetStr);
        else
            charSet = null;
        _uiState.KeyDefinition.CharSet = charSet;
    }

    private void Analyze()
    {
        var altDef = KeyAnalyzer.AnalyzeKeyString(_uiState.KeyDefinition.KeyString);
        _uiState.KeyDefinition.ReadFields(altDef);
        EditContext.Validate();
    }

    private void NextScreen()
    {
        _uiState.ValidKeyDefinition = _uiState.KeyDefinition.DeepCopy();
        _uiState.PathDefinition.EffectiveKeyString = _uiState.KeyDefinition.Separator == null 
            ? _uiState.KeyDefinition.KeyString 
            : _uiState.KeyDefinition.KeyString.Replace(_uiState.KeyDefinition.SeparatorStr, "");
        _navigationManager.NavigateTo("3");
    }

    private void Undo()
    {
        Console.WriteLine("Undo clicked " + DateTime.Now);
        if (_uiState.ValidKeyDefinition != null)
            _uiState.KeyDefinition.ReadFields(_uiState.ValidKeyDefinition);
    }

}