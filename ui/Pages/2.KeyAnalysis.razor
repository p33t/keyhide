@page "/2"
@inject UiState _uiState
@inject NavigationManager _navigationManager
<h3>Key Analysis</h3>
@* NOTE: IValidatableObject error checking only occurs upon submit *@
<EditForm EditContext="@EditContext" OnValidSubmit="@NextScreen">
    <button type="button" class="next-button btn btn-warning" @onclick="@(() => _navigationManager.NavigateTo(""))">Back</button>
    <button type="button" class="next-button btn btn-warning" @onclick="Undo" disabled="@UndoDisabled">Undo</button>
    <button type="submit" class="next-button btn btn-warning">Next</button>
    <p>
        &nbsp;<br/>
        Enter the key that will be hidden among the grid of random characters and select 'Analyze'.<br/>
        For best results, enter additional key samples, 'Analyze' and then 'Customize' the master set of characters to remove unused characters.<br/>
        Confirm the parameters are correct before proceeding to the next step.
    </p>
    <div class="form-fields">
        <div class="form-field">
            <label>Key:</label>
            <div>
                <input type="text" class="text-monospace" minlength="1"
                       @bind-value="@_uiState.KeyDefinition.KeyString" @bind-value:event="oninput"/>
                <ValidationMessage For="@(() => _uiState.KeyDefinition.KeyString)"/>
            </div>
        </div>
        <div class="form-field">
            <label>Sample Keys:</label>
            <div>
                <textarea class="text-monospace" style="width: 100%;"
                       @bind-value="@_uiState.KeyDefinition.SampleKeyStrings" @bind-value:event="oninput"></textarea>
                <ValidationMessage For="@(() => _uiState.KeyDefinition.SampleKeyStrings)"/>
                <button type="button" @onclick="Analyze">Analyze</button>
            </div>
        </div>
        <div class="form-field">
            <label>Prefix / Suffix:</label>
            <div style="display: flex;">
                <div style="display: inline-block; width: 10em;">
                    <InputNumber style="width: 3em;" @bind-Value="_uiState.KeyDefinition.PrefixLength" 
                                 min="0" max="@MaxPrefixSuffixLength"/>
                    <span class="text-monospace">@_uiState.KeyDefinition.Prefix</span>
                    <ValidationMessage For="@(() => _uiState.KeyDefinition.PrefixLength)"/>
                </div>
                <div style="display: inline-block; width: 10em; text-align: end">
                    <span class="text-monospace">@_uiState.KeyDefinition.Suffix</span>
                    <InputNumber style="width: 3em;" @bind-Value="_uiState.KeyDefinition.SuffixLength" 
                                 min="0" max="@MaxPrefixSuffixLength"/>
                    <ValidationMessage For="@(() => _uiState.KeyDefinition.SuffixLength)"/>
                </div>
            </div>
        </div>
        <div class="form-field">
            <label>Fragment Separator:</label>
            <div>
                <input type="text" class="text-monospace" style="width: 2em;" maxlength="1"
                       onclick="this.setSelectionRange(0, this.value.length)"
                       @bind-value="@_uiState.KeyDefinition.SeparatorStr" @bind-value:event="oninput"/>
                @if (_uiState.KeyDefinition.Separator == null)
                {
                    <span> (none)</span>
                }
                @if (_uiState.KeyDefinition.Separator == ' ')
                {
                    <span> (space)</span>
                }
                <ValidationMessage For="@(() => _uiState.KeyDefinition.Separator)"/>
            </div>
        </div>
        <div class="form-field">
            <label>Pre-defined Characters:</label>
            <div>
                <InputSelect @bind-Value="_uiState.KeyDefinition.CharSet">
                    <option @key=null value="">(Custom)</option>
                    @foreach (var charSet in Enum.GetValues<KeyCharSetEnum>())
                    {
                        <option @key=charSet value="@charSet">@charSet</option>
                    }
                </InputSelect>
                <button type="button" @onclick="Customize">Customize</button>
                <ValidationMessage For="@(() => _uiState.KeyDefinition.CharSet)"/>
            </div>
        </div>
        <div class="form-field">
            <label>Custom Characters:</label>
            <div>
                <InputText class="text-monospace" @bind-Value="_uiState.KeyDefinition.CustomCharset"/>
                <ValidationMessage For="@(() => _uiState.KeyDefinition.CustomCharset)"/>
            </div>
        </div>
    </div>
    <DataAnnotationsValidator/>
    <CharSetTally
        KeyStrings="@(string.Join(null, _uiState.KeyDefinition.CompleteSampleBody))"
        Separator="@_uiState.KeyDefinition.Separator"
        CharSet="@(_uiState.KeyDefinition.CharSet == null ? (_uiState.KeyDefinition.CustomCharset ?? "").ToHashSet() : KeyAnalyzer.CharSetFor(_uiState.KeyDefinition.CharSet!.Value))"
        RemoveUnusedChar="RemoveUnused" AddMissingChar="AddMissing"/>
</EditForm>

@code {
#nullable enable

    private bool UndoDisabled => _uiState.ValidKeyDefinition == null;
    // Causes 'Undo' become available only after field on-change:
    // || _uiState.KeyDefinition.Equals(_uiState.ValidKeyDefinition)

    private EditContext EditContext { get; set; } = null!;
    private int MaxPrefixSuffixLength => Math.Max(_uiState.KeyDefinition.KeyString.Length * 2 / 3, 20);

    protected override void OnInitialized()
    {
        EditContext = new EditContext(_uiState.KeyDefinition);
        base.OnInitialized();
    }

    private void Analyze()
    {
        KeyAnalyzer.AnalyzeKeyDefinition(_uiState.KeyDefinition);
        EditContext.Validate();
    }

    private void NextScreen()
    {
        _uiState.ValidKeyDefinition = _uiState.KeyDefinition.DeepCopy();
        _navigationManager.NavigateTo("3");
    }

    private void Undo()
    {
        if (_uiState.ValidKeyDefinition != null)
        {
            _uiState.KeyDefinition.ReadFields(_uiState.ValidKeyDefinition);
            EditContext.Validate();
        }
    }

    private void Customize()
    {
        if (_uiState.KeyDefinition.CharSet != null)
        {
            var chars = KeyAnalyzer.CharSetFor(_uiState.KeyDefinition.CharSet!.Value).ToList();
            chars.Sort();
            _uiState.KeyDefinition.CustomCharset = chars.AsString();
            _uiState.KeyDefinition.CharSet = null;
        }
    }

    private void RemoveUnused(char unused)
    {
        Customize();
        var alt = _uiState.KeyDefinition.CustomCharset!.Where(ch => ch != unused).AsString();
        _uiState.KeyDefinition.CustomCharset = alt;
    }
    
    private void AddMissing(char missing)
    {
        Customize();
        var alt = _uiState.KeyDefinition.CustomCharset! + missing;
        _uiState.KeyDefinition.CustomCharset = alt;
    }
}