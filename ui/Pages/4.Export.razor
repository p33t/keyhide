@page "/4"
@inject UiState _uiState
@inject IJSRuntime _jsRuntime
@using System.Text.Json
@using System.Reflection
@using System.Text
@using System.IO
<h3>Export</h3>
<p>
    Trace the same path on the grid in this HTML file to reveal your secret key.<br/>
    (Don't forget to remove the ".txt" extension)
</p>
<p>
    <button type="button" @onclick="ExportDeliverable" disabled="@ExportDisabled">Export</button>
</p>

@code {
#nullable enable

    private bool ExportDisabled => _uiState.ValidKeyDefinition == null || _uiState.ValidPathDefinition == null;

    private async Task ExportDeliverable()
    {
        var keyDefinition = _uiState.ValidKeyDefinition!;
        var pathDefinition = _uiState.ValidPathDefinition!;
        var charSet = keyDefinition.CharSet == null
            ? keyDefinition.CustomCharset!.ToHashSet()
            : KeyAnalyzer.CharSetFor(keyDefinition.CharSet!.Value);

        using var randomDoubles = RandomCharacter.PseudoRandom().GetEnumerator();
        var filler = RandomCharacter.GenerateCharacters(pathDefinition.EffectiveKeyString!,
            pathDefinition.ColCount * pathDefinition.RowCount, charSet, randomDoubles);
        
        var model = KeyAnalyzer.CreateFinalModel(pathDefinition, keyDefinition, filler);

        byte[] file = Encoding.UTF8.GetBytes(await RenderFinal(model));
        var b64 = Convert.ToBase64String(file);
        var timeString = DateTime.Now.ToString("yyyy-MM-dd_hh_mm_ss");
        await _jsRuntime.InvokeVoidAsync("saveAsFile", $"keyhide_{timeString}.html.txt", "text/plain", b64);
    }

    private async Task<string> RenderFinal(FinalModel model)
    {
        var deliverable = await LoadDeliverable();
        return deliverable.Replace("// FINAL_MODEL_MARKER", $"finalModel = {JsonSerializer.Serialize(model)};");
    }

    private static async Task<string> LoadDeliverable()
    {
        var assembly = Assembly.GetAssembly(typeof(UiState));
        var fileName = $"{assembly!.GetName().Name}.etc.deliverable.html";
        await using var resFilestream = assembly.GetManifestResourceStream(fileName);
        await using var ms = new MemoryStream();
        await resFilestream!.CopyToAsync(ms);
        await resFilestream.DisposeAsync();
        var bytes = ms.ToArray();
        await ms.DisposeAsync();
        return Encoding.UTF8.GetString(bytes);
    }

}