@if (Grid != null)
{
    <table style="text-align: center; border-collapse: collapse">
        @for (var ixRow = 0; ixRow < Grid.RowCount; ixRow++)
        {
            <tr @key=ixRow>
                @for (var ixCol = 0; ixCol < Grid.ColCount; ixCol++)
                {
                    var coord = CellCoord.Create(ixCol, ixRow);
                    var displayCell = Grid[coord];
                    var occupied = displayCell?.Content == null
                        ? "unoccupied"
                        : "occupied";
                    var available = displayCell?.IsAvailable ?? true
                            ? "available"
                            : "unavailable";
                    var isOddCell = ((ixRow / BoxSize) % 2 + (ixCol / BoxSize) % 2) % 2 == 0
                        ? "oddCell"
                        : "evenCell";
                    <td @key=coord class="@isOddCell @occupied @available">
                        <a href='' @onclick="() => CellClick(coord)" @onclick:preventDefault>@coord</a>
                    </td>
                }
            </tr>
        }
    </table>
}

@code {

    private int BoxSize
    {
        get
        {
            var lineLength = Grid!.ColCount;
            var maxSide = Math.Max(lineLength, Grid.RowCount);
            return maxSide > 20 ? 3 : maxSide > 10 ? 2 : 1;
        }
    }

    private async Task CellClick(CellCoord coord)
    {
        await OnCellSelect.InvokeAsync(coord);
    }

    [Parameter]
    public CoordGrid<DisplayCell>? Grid { get; set; }

    [Parameter]
    public EventCallback<CellCoord> OnCellSelect { get; set; }

}