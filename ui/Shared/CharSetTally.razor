@using System.Collections.Immutable

<div class="form-field">
    <label>Character Tally:</label>
    <table>
        @foreach (var (ch, count) in IncludedTally)
        {
            <td>
                @if (count == 0)
                {
                <a href='' @onclick="() => RemoveUnused(ch)" @onclick:preventDefault>
                    <span class="tally-included-zero text-monospace" title="Click to remove">@ch</span>
                </a>
                <br/>
                <span class="tally-count">-</span>
                }
                @if (count > 0)
                {
                    <span class="tally-included text-monospace">@ch</span><br/>
                    <span class="tally-count">@count</span>
                }
            </td>
        }
    </table>
</div>

@if (ExtrasTally.Any())
{
    <div class="form-field">
        <label>Extras:</label>
        <table>
            @foreach (var (ch, count) in ExtrasTally)
            {
                <td>
                <a href='' @onclick="() => AddMissing(ch)" @onclick:preventDefault>
                    <span class="tally-extra text-monospace" title="Click to add">@ch</span>
                </a>
                <br/>
                    <span class="tally-count">@count</span>
                </td>
            }
        </table>
    </div>
}

@code {
    [Parameter]
    public EventCallback<char> RemoveUnusedChar { get; set; }

    [Parameter]
    public EventCallback<char> AddMissingChar { get; set; }
    
    private List<(char, int)> IncludedTally { get; set; } = new List<(char, int)>();

    private List<(char, int)> ExtrasTally { get; set; } = new List<(char, int)>();

    [Parameter]
    public string KeyStrings { get; set; } = string.Empty;

    [Parameter]
    public char? Separator { get; set; }

    [Parameter]
    public ISet<char> CharSet { get; set; } = ImmutableHashSet<char>.Empty;

    protected override void OnParametersSet()
    {
        var tally = KeyStrings
            .Where(ch => ch != '\n' && ch != Separator)
            .GroupBy(ch => ch)
            .ToDictionary(grp => grp.Key, grp => grp.Count());

        IncludedTally = CharSet
            .Select(ch =>
            {
                tally.TryGetValue(ch, out var count);
                return (ch, count);
            })
            .ToList();
        IncludedTally.Sort((left, right) => left.Item1.CompareTo(right.Item1));

        ExtrasTally = tally
            .Where(kv => !CharSet.Contains(kv.Key))
            .Select(kv => (kv.Key, kv.Value))
            .ToList();
        ExtrasTally.Sort((left, right) => left.Item1.CompareTo(right.Item1));

        base.OnParametersSet();
    }

    private async Task RemoveUnused(char ch)
    {
        await RemoveUnusedChar.InvokeAsync(ch);
    }

    private async Task AddMissing(char ch)
    {
        await AddMissingChar.InvokeAsync(ch);
    }
}